\section{Introduction}

Today's tools for domain specific languages (DSL) make it feasible to build complex languages. These usually need expressions and type system support, for which checking is non-trivial. Type systems may help to avoid boilerplate code for validation and scoping, i.e., code which determines scopes and visibilities of references and variables.

Intro to expressions

The developer of the language may arbitrarily define which of his model elements he considers as types and define arbitrary rules for them. Usually, the language allows to assign types to certain elements (for instance, \emph{integer} to a variable called \verb|a|) and build expressions with these elements and the type system constraints make sure that all expressions (such as \verb|a = 16|) of are free of what the designer considers type errors, e.g. \verb|a + true|. 

Xbase, which is shipped with Xtext 2, Xsemantics \cite{lbts} and Xtext/TS \cite{mvts} are all Eclipse plug-ins.
