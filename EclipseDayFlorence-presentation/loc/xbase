packageorg.typesys.xbase.guidsl.jvmmodelimportcom.google.inject.Injectimportorg.eclipse.xtext.common.types.JvmDeclaredTypeimportorg.eclipse.xtext.common.types.JvmTypeReferenceimportorg.eclipse.xtext.xbase.XExpressionimportorg.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociationsimportorg.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilderimportorg.eclipse.xtext.xbase.typing.ITypeProviderimportorg.typesys.xbase.guidsl.xGuiDsl.Attributeimportorg.typesys.xbase.guidsl.xGuiDsl.Entityimportorg.typesys.xbase.guidsl.xGuiDsl.WidgetclassGuiTypeProvider{@InjectITypeProvidertypeProvider@InjectJvmTypesBuilderjvmTypesBuilder@InjectIJvmModelAssociationsassociationsdefJvmTypeReferencegetJvmType(Attributeattr){switchattr{Attributecaseattr.type!=null:attr.typeAttributecaseattr.expr!=null:getJvmType(attr.getExpr())default:null}}defJvmTypeReferencegetJvmType(Widgetwidget){getJvmType(widget.getAttr())}defJvmTypeReferencegetJvmType(Entityentity){valentityType=associations.getJvmElements(entity).headasJvmDeclaredTypejvmTypesBuilder.newTypeRef(entityType)}defJvmTypeReferencegetJvmType(XExpressionexpression){typeProvider.getType(expression)}}packageorg.typesys.xbase.guidsl.jvmmodelimportcom.google.inject.Injectimportorg.eclipse.xtext.naming.IQualifiedNameProviderimportorg.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrerimportorg.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptorimportorg.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilderimportorg.typesys.xbase.guidsl.xGuiDsl.Entityimportorg.typesys.xbase.guidsl.xGuiDsl.Formimportorg.eclipse.xtext.common.types.JvmOperationclassXGuiDslJvmModelInferrerextendsAbstractModelInferrer{@InjectextensionJvmTypesBuilder@InjectextensionIQualifiedNameProvider@InjectextensionGuiTypeProviderguiTypeProviderdefdispatchvoidinfer(Entityelement,IJvmDeclaredTypeAcceptoracceptor,booleanpreIndexingPhase){acceptor.accept(element.toClass(element.fullyQualifiedName)).initializeLater[documentation=element.documentationif(element.superType!=null)superTypes+=element.superType.cloneWithProxiesfor(attribute:element.attributes){valgetter=attribute.toGetter(attribute.name,attribute.getJvmType)members+=getterif(attribute.expr!=null){getter.body=attribute.expr}else{members+=attribute.toField(attribute.name,attribute.getJvmType)members+=attribute.toSetter(attribute.name,attribute.getJvmType)}}]}defdispatchvoidinfer(Formform,IJvmDeclaredTypeAcceptoracceptor,booleanpreIndexingPhase){acceptor.accept(form.toClass(form.fullyQualifiedName)).initializeLater[documentation=form.documentationfor(widget:form.widgets){if(widget.validate!=null&&widget.attr!=null){members+=widget.toMethod('validate'+widget.attr.name.toFirstUpper,form.newTypeRef(Boolean::TYPE))[parameters+=widget.toParameter("it",form.entity.getJvmType)parameters+=widget.toParameter("widgetcontent",widget.attr.getJvmType)body=widget.validate]}}]}}packageorg.typesys.xbase.guidsl.validationimportcom.google.inject.Injectimportjava.util.Listimportorg.eclipse.emf.ecore.EPackageimportorg.eclipse.xtext.validation.Checkimportorg.eclipse.xtext.xbase.validation.IssueCodesimportorg.eclipse.xtext.xbase.validation.XbaseJavaValidatorimportorg.typesys.xbase.guidsl.jvmmodel.GuiTypeProviderimportorg.typesys.xbase.guidsl.xGuiDsl.CheckBoxWidgetimportorg.typesys.xbase.guidsl.xGuiDsl.TextWidgetimportorg.typesys.xbase.guidsl.xGuiDsl.XGuiDslPackageimportorg.typesys.xbase.guidsl.xGuiDsl.XGuiDslPackage$Literalsimportorg.typesys.xbase.guidsl.xGuiDsl.Widgetimportorg.eclipse.xtext.common.types.util.TypeConformanceComputerimportorg.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilderimportorg.eclipse.xtext.common.types.util.PrimitivesclassXGuiDslJavaValidatorxextendsXbaseJavaValidator{@InjectprivateextensionGuiTypeProvidertypeProvider;@InjectTypeConformanceComputertypeConformanceComputer;@InjectPrimitivesprimitives@InjectextensionJvmTypesBuilderoverrideList<EPackage>getEPackages(){valList<EPackage>packages=newArrayList()packages.addAll(super.getEPackages())packages.add(XGuiDslPackage::eINSTANCE)returnpackages}@CheckdefvoidcheckTextWidgetForNonBoolean(TextWidgetwidget){valjvmTypeReference=widget.attr.getJvmTypeif(jvmTypeReference==null)return;if(jvmTypeReference.getQualifiedName().equals(Boolean::TYPE.getName())){error("TextboxmayNOTrefertobooleanattributes.",XGuiDslPackage$Literals::WIDGET__ATTR,IssueCodes::INCOMPATIBLE_TYPES);}}@CheckdefvoidcheckBoxWidgetOnlyBoolean(CheckBoxWidgetwidget){valjvmTypeReference=widget.attr.getJvmTypeif(jvmTypeReference==null){return}if(!jvmTypeReference.getQualifiedName().equals(Boolean::TYPE.getName())){error("Checkboxmayonlyrefertobooleanattributes,butfoundtype"+jvmTypeReference.getQualifiedName(),XGuiDslPackage$Literals::WIDGET__ATTR,IssueCodes::INCOMPATIBLE_TYPES);}}@Checkdefvoidcheck(Widgetwidget){valjvmTypeReference=widget.getJvmTypeif(jvmTypeReference==null)return;valstringRef=widget.newTypeRef(typeof(String).canonicalName)if(primitives.isPrimitive(jvmTypeReference)||jvmTypeReference.identifier.equals(stringRef.identifier)){return;}error("Widgetsmayonlyrefertoprimitivetypes,butfoundtype"+jvmTypeReference.qualifiedName,XGuiDslPackage$Literals::WIDGET__ATTR,IssueCodes::INCOMPATIBLE_TYPES)}}