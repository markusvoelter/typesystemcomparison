packageorg.typesys.xts.guidsl.typesys;importjava.util.Set;importorg.eclipse.emf.ecore.EObject;importorg.typesys.xts.guidsl.guiDsl.Entity;importorg.typesys.xts.guidsl.guiDsl.EntityType;importorg.typesys.xts.guidsl.guiDsl.FloatType;importorg.typesys.xts.guidsl.guiDsl.GuiDslPackage;importorg.typesys.xts.guidsl.guiDsl.IntType;importorg.typesys.xts.guidsl.guiDsl.NumberLiteral;importorg.typesys.xts.guidsl.guiDsl.StringLiteral;importorg.typesys.xts.guidsl.guiDsl.StringType;importcom.google.common.collect.Sets;importde.itemis.xtext.typesystem.trace.TypeCalculationTrace;publicclassGuiDlsTypesystemextendsGuiDlsTypesystemGenerated{privateGuiDslPackagecl=GuiDslPackage.eINSTANCE;@Overrideprotectedvoidinitialize(){super.initialize();}@OverridepublicEObjecttype(NumberLiterals,TypeCalculationTracetrace){if(s.getValue().equals(s.getValue().intValue())){returncreate(cl.getIntType());}returncreate(cl.getFloatType());}@OverrideprotectedEObjecttype(Entityelement,TypeCalculationTracetrace){EntityTypeet=(EntityType)create(cl.getEntityType());et.setRef(element);returnet;}protectedbooleancompareTypes(EntityTypet1,EntityTypet2,CheckKindk,TypeCalculationTracetrace){if(k==CheckKind.same)returnt1.getRef()==t2.getRef();if(k==CheckKind.ordered)returninternalCompareTypesOrdered(t1.getRef(),t2.getRef(),Sets.<Entity>newHashSet());returnfalse;}protectedbooleaninternalCompareTypesOrdered(Entityt1,Entityt2,Set<Entity>visited){if(visited.contains(t2))returnfalse;visited.add(t2);returnt1==t2||(t2.getExtends()!=null&&internalCompareTypesOrdered(t1,t2.getExtends(),visited));}publicEObjecttypeCoerce(EObjectcandidateElement,FloatTypecandidate,StringTypeexpected,TypeCalculationTracetrace){if(candidateElementinstanceofNumberLiteral){trace.add(candidateElement,"Numbercoercedtostring.");returncreate(cl.getStringType());}returnnull;}}typesystemorg.typesys.xts.guidsl.typesys.GuiDlsTypesystemecorefile"platform:/resource/org.typesys.xts.guidsl/src-gen/org/typesys/xts/guidsl/GuiDsl.ecore"languagepackageorg.typesys.xts.guidsl.guiDsl.GuiDslPackagesection"Types"typeofType+->clonetypeofEntityType->clonesubtypeFloatTypebaseIntTypesection"Literals"typeofStringLiteral->StringTypetypeofBooleanLiteral->BooleanTypetypeofNumberLiteral->javacodesection"Expressions"characteristicCOMPARABLE{IntType,FloatType,BooleanType,StringType}characteristicNUMERIC{IntType,FloatType}typeofExpression->abstracttypeofArithmeticSigned->featureexpressiontypeofComparison->BooleanType{ensureTypeleft:<=:char(COMPARABLE)ensureTyperight:<=:char(COMPARABLE)ensureCompatibilityleft:<=>:right}typeofEquality->BooleanType{ensureTypeleft:<=:char(COMPARABLE),BooleanTypeensureTyperight:<=:char(COMPARABLE),BooleanTypeensureCompatibilityleft:<=>:right}typeofAndOrExpression->BooleanType{ensureTypeleft:<=:BooleanTypeensureTyperight:<=:BooleanType}typeofPlus->commonleftright{ensureTypeleft:<=:StringType,char(NUMERIC)ensureTyperight:<=:StringType,char(NUMERIC)ensureCompatibilityleft:<=>:right}typeofMinus->commonleftright{ensureTypeleft:<=:char(NUMERIC)ensureTyperight:<=:char(NUMERIC)ensureCompatibilityleft:<=>:right}typeofMultiOrDiv->commonleftright{ensureTypeleft:<=:char(NUMERIC)ensureTyperight:<=:char(NUMERIC)}typeofBooleanNegation->BooleanType{ensureTypeexpression:<=:BooleanType}typeofAttributeRef->featureattrtypeofLenghtOf->IntTypetypeofAttribute->commonexprtype{ensureCompatibilitytype:<=:expr}typeofWidget->abstracttypeofTextWidget->featureattr{ensureTypeattr:<=:StringType,IntType,FloatTypeensureTypevalidate:<=:BooleanType}typeofCheckBoxWidget->featureattr{ensureTypeattr:<=:BooleanTypeensureTypevalidate:<=:BooleanType}typeofFieldContent->ancestorWidgettypeofNewExpr->featureentitytypeofEntity->javacodepackageorg.typesys.xts.guidsl.validation;importorg.eclipse.emf.ecore.EObject;importorg.eclipse.xtext.validation.Check;importorg.eclipse.xtext.validation.CheckType;importcom.google.inject.Inject;importde.itemis.xtext.typesystem.ITypesystem;publicclassGuiDslJavaValidatorextendsAbstractGuiDslJavaValidator{@InjectprivateITypesystemts;@Check(CheckType.NORMAL)publicvoidvalidateTypes(EObjectm){ts.checkTypesystemConstraints(m,this);}}