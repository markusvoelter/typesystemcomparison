/*
* generated by Xtext
*/
grammar InternalGuiDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.typesys.xts.guidsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.typesys.xts.guidsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.typesys.xts.guidsl.services.GuiDslGrammarAccess;

}

@parser::members {

 	private GuiDslGrammarAccess grammarAccess;
 	
    public InternalGuiDslParser(TokenStream input, GuiDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GuiDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getEntitiesEntityParserRuleCall_0_0()); 
	    }
		lv_entities_0_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"entities",
        		lv_entities_0_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getFormsFormParserRuleCall_1_0()); 
	    }
		lv_forms_1_0=ruleForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"forms",
        		lv_forms_1_0, 
        		"Form");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	 iv_ruleForm=ruleForm 
	 { $current=$iv_ruleForm.current; } 
	 EOF 
;

// Rule Form
ruleForm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='form' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFormAccess().getFormKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFormAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='edits' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFormAccess().getEditsKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFormAccess().getEntityEntityCrossReference_3_0()); 
	}

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFormAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormAccess().getWidgetsWidgetParserRuleCall_5_0()); 
	    }
		lv_widgets_5_0=ruleWidget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormRule());
	        }
       		add(
       			$current, 
       			"widgets",
        		lv_widgets_5_0, 
        		"Widget");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFormAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleWidget
entryRuleWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWidgetRule()); }
	 iv_ruleWidget=ruleWidget 
	 { $current=$iv_ruleWidget.current; } 
	 EOF 
;

// Rule Widget
ruleWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getWidgetAccess().getTextWidgetParserRuleCall_0()); 
    }
    this_TextWidget_0=ruleTextWidget
    { 
        $current = $this_TextWidget_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getWidgetAccess().getCheckBoxWidgetParserRuleCall_1()); 
    }
    this_CheckBoxWidget_1=ruleCheckBoxWidget
    { 
        $current = $this_CheckBoxWidget_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTextWidget
entryRuleTextWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextWidgetRule()); }
	 iv_ruleTextWidget=ruleTextWidget 
	 { $current=$iv_ruleTextWidget.current; } 
	 EOF 
;

// Rule TextWidget
ruleTextWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='text' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextWidgetAccess().getTextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextWidgetAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_length_2_0=RULE_DECIMAL_NUMBER
		{
			newLeafNode(lv_length_2_0, grammarAccess.getTextWidgetAccess().getLengthDECIMAL_NUMBERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextWidgetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"DECIMAL_NUMBER");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextWidgetAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTextWidgetAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextWidgetRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getTextWidgetAccess().getAttrAttributeCrossReference_5_0()); 
	}

)
)(	otherlv_6='validate' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTextWidgetAccess().getValidateKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTextWidgetAccess().getValidateExprParserRuleCall_6_1_0()); 
	    }
		lv_validate_7_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTextWidgetRule());
	        }
       		set(
       			$current, 
       			"validate",
        		lv_validate_7_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTextWidgetAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleCheckBoxWidget
entryRuleCheckBoxWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckBoxWidgetRule()); }
	 iv_ruleCheckBoxWidget=ruleCheckBoxWidget 
	 { $current=$iv_ruleCheckBoxWidget.current; } 
	 EOF 
;

// Rule CheckBoxWidget
ruleCheckBoxWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='checkbox' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheckBoxWidgetAccess().getCheckboxKeyword_0());
    }
	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheckBoxWidgetAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheckBoxWidgetRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCheckBoxWidgetAccess().getAttrAttributeCrossReference_2_0()); 
	}

)
)(	otherlv_3='validate' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheckBoxWidgetAccess().getValidateKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckBoxWidgetAccess().getValidateExprParserRuleCall_3_1_0()); 
	    }
		lv_validate_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckBoxWidgetRule());
	        }
       		set(
       			$current, 
       			"validate",
        		lv_validate_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCheckBoxWidgetAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='entity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getSimpleAttributeParserRuleCall_0()); 
    }
    this_SimpleAttribute_0=ruleSimpleAttribute
    { 
        $current = $this_SimpleAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getDerivedAttributeParserRuleCall_1()); 
    }
    this_DerivedAttribute_1=ruleDerivedAttribute
    { 
        $current = $this_DerivedAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDerivedAttribute
entryRuleDerivedAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDerivedAttributeRule()); }
	 iv_ruleDerivedAttribute=ruleDerivedAttribute 
	 { $current=$iv_ruleDerivedAttribute.current; } 
	 EOF 
;

// Rule DerivedAttribute
ruleDerivedAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='/' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDerivedAttributeAccess().getSolidusKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDerivedAttributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDerivedAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDerivedAttributeAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDerivedAttributeAccess().getExprExprParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDerivedAttributeRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDerivedAttributeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSimpleAttribute
entryRuleSimpleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleAttributeRule()); }
	 iv_ruleSimpleAttribute=ruleSimpleAttribute 
	 { $current=$iv_ruleSimpleAttribute.current; } 
	 EOF 
;

// Rule SimpleAttribute
ruleSimpleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSimpleAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleAttributeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAttributeAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleAttributeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getEntityTypeParserRuleCall_1()); 
    }
    this_EntityType_1=ruleEntityType
    { 
        $current = $this_EntityType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntityType
entryRuleEntityType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityTypeRule()); }
	 iv_ruleEntityType=ruleEntityType 
	 { $current=$iv_ruleEntityType.current; } 
	 EOF 
;

// Rule EntityType
ruleEntityType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEntityTypeAccess().getRefEntityCrossReference_0()); 
	}

)
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getIntTypeParserRuleCall_0()); 
    }
    this_IntType_0=ruleIntType
    { 
        $current = $this_IntType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getFloatTypeParserRuleCall_1()); 
    }
    this_FloatType_1=ruleFloatType
    { 
        $current = $this_FloatType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_2()); 
    }
    this_BooleanType_2=ruleBooleanType
    { 
        $current = $this_BooleanType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_3()); 
    }
    this_StringType_3=ruleStringType
    { 
        $current = $this_StringType_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFloatType
entryRuleFloatType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatTypeRule()); }
	 iv_ruleFloatType=ruleFloatType 
	 { $current=$iv_ruleFloatType.current; } 
	 EOF 
;

// Rule FloatType
ruleFloatType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFloatTypeAccess().getFloatTypeAction_0(),
            $current);
    }
)	otherlv_1='float' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloatTypeAccess().getFloatKeyword_1());
    }
)
;





// Entry rule entryRuleIntType
entryRuleIntType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntTypeRule()); }
	 iv_ruleIntType=ruleIntType 
	 { $current=$iv_ruleIntType.current; } 
	 EOF 
;

// Rule IntType
ruleIntType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntTypeAccess().getIntTypeAction_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntTypeAccess().getIntKeyword_1());
    }
)
;





// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	 iv_ruleBooleanType=ruleBooleanType 
	 { $current=$iv_ruleBooleanType.current; } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0(),
            $current);
    }
)	otherlv_1='bool' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanTypeAccess().getBoolKeyword_1());
    }
)
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringTypeAccess().getStringTypeAction_0(),
            $current);
    }
)	otherlv_1='string' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringTypeAccess().getStringKeyword_1());
    }
)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getComparisonLevelParserRuleCall()); 
    }
    this_ComparisonLevel_0=ruleComparisonLevel
    { 
        $current = $this_ComparisonLevel_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleComparisonLevel
entryRuleComparisonLevel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonLevelRule()); }
	 iv_ruleComparisonLevel=ruleComparisonLevel 
	 { $current=$iv_ruleComparisonLevel.current; } 
	 EOF 
;

// Rule ComparisonLevel
ruleComparisonLevel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonLevelAccess().getAdditionLevelParserRuleCall_0()); 
    }
    this_AdditionLevel_0=ruleAdditionLevel
    { 
        $current = $this_AdditionLevel_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getEqualsLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='==' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComparisonLevelAccess().getEqualsSignEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getUnequalsLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='!=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComparisonLevelAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getGreaterLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComparisonLevelAccess().getGreaterThanSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getGreaterEqualsLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='>=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getComparisonLevelAccess().getGreaterThanSignEqualsSignKeyword_1_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getSmallerEqualsLeftAction_1_0_4_0(),
            $current);
    }
)	otherlv_10='<=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getComparisonLevelAccess().getLessThanSignEqualsSignKeyword_1_0_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getLogicalAndLeftAction_1_0_5_0(),
            $current);
    }
)	otherlv_12='&&' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getComparisonLevelAccess().getAmpersandAmpersandKeyword_1_0_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getImpliesLeftAction_1_0_6_0(),
            $current);
    }
)	otherlv_14='=>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getComparisonLevelAccess().getEqualsSignGreaterThanSignKeyword_1_0_6_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getLogicalOrLeftAction_1_0_7_0(),
            $current);
    }
)	otherlv_16='||' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getComparisonLevelAccess().getVerticalLineVerticalLineKeyword_1_0_7_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonLevelAccess().getSmallerLeftAction_1_0_8_0(),
            $current);
    }
)	otherlv_18='<' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getComparisonLevelAccess().getLessThanSignKeyword_1_0_8_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonLevelAccess().getRightAdditionLevelParserRuleCall_1_1_0()); 
	    }
		lv_right_19_0=ruleAdditionLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonLevelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_19_0, 
        		"AdditionLevel");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditionLevel
entryRuleAdditionLevel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionLevelRule()); }
	 iv_ruleAdditionLevel=ruleAdditionLevel 
	 { $current=$iv_ruleAdditionLevel.current; } 
	 EOF 
;

// Rule AdditionLevel
ruleAdditionLevel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionLevelAccess().getMultiplicationLevelParserRuleCall_0()); 
    }
    this_MultiplicationLevel_0=ruleMultiplicationLevel
    { 
        $current = $this_MultiplicationLevel_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionLevelAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionLevelAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionLevelAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionLevelAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionLevelAccess().getRightMultiplicationLevelParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplicationLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionLevelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"MultiplicationLevel");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicationLevel
entryRuleMultiplicationLevel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationLevelRule()); }
	 iv_ruleMultiplicationLevel=ruleMultiplicationLevel 
	 { $current=$iv_ruleMultiplicationLevel.current; } 
	 EOF 
;

// Rule MultiplicationLevel
ruleMultiplicationLevel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationLevelAccess().getPrefixOpLevelParserRuleCall_0()); 
    }
    this_PrefixOpLevel_0=rulePrefixOpLevel
    { 
        $current = $this_PrefixOpLevel_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationLevelAccess().getMultiLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationLevelAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationLevelAccess().getDivLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationLevelAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationLevelAccess().getRightPrefixOpLevelParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=rulePrefixOpLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationLevelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"PrefixOpLevel");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrefixOpLevel
entryRulePrefixOpLevel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixOpLevelRule()); }
	 iv_rulePrefixOpLevel=rulePrefixOpLevel 
	 { $current=$iv_rulePrefixOpLevel.current; } 
	 EOF 
;

// Rule PrefixOpLevel
rulePrefixOpLevel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixOpLevelAccess().getNotExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrefixOpLevelAccess().getExclamationMarkKeyword_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrefixOpLevelAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixOpLevelAccess().getExprExprParserRuleCall_0_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixOpLevelRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrefixOpLevelAccess().getRightParenthesisKeyword_0_4());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrefixOpLevelAccess().getAtomicParserRuleCall_1()); 
    }
    this_Atomic_5=ruleAtomic
    { 
        $current = $this_Atomic_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getTrueExprAction_0_0(),
            $current);
    }
)	otherlv_1='true' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomicAccess().getTrueKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getFalseExprAction_1_0(),
            $current);
    }
)	otherlv_3='false' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomicAccess().getFalseKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getFieldContentAction_2_0(),
            $current);
    }
)	otherlv_5='widgetcontent' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicAccess().getWidgetcontentKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getLenghtOfAction_3_0(),
            $current);
    }
)	otherlv_7='lengthOf' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAtomicAccess().getLengthOfKeyword_3_1());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getExprExprParserRuleCall_3_3_0()); 
	    }
		lv_expr_9_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_9_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAtomicAccess().getRightParenthesisKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getParenExprAction_4_0(),
            $current);
    }
)	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getExprExprParserRuleCall_4_2_0()); 
	    }
		lv_expr_13_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_13_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAtomicAccess().getRightParenthesisKeyword_4_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getNumberLiteralAction_5_0(),
            $current);
    }
)(
(
		lv_value_16_0=RULE_DECIMAL_NUMBER
		{
			newLeafNode(lv_value_16_0, grammarAccess.getAtomicAccess().getValueDECIMAL_NUMBERTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_16_0, 
        		"DECIMAL_NUMBER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getStringLiteralAction_6_0(),
            $current);
    }
)(
(
		lv_value_18_0=RULE_STRING
		{
			newLeafNode(lv_value_18_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_18_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getAttributeRefAction_7_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
        }
	otherlv_20=RULE_ID
	{
		newLeafNode(otherlv_20, grammarAccess.getAtomicAccess().getAttrAttributeCrossReference_7_1_0()); 
	}

)
)))
;





RULE_DECIMAL_NUMBER : '-'? ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : 'this one has been deactivated';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


