/*
* generated by Xtext
*/

package org.typesys.xts.guidsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GuiDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cFormsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFormsFormParserRuleCall_1_0 = (RuleCall)cFormsAssignment_1.eContents().get(0);
		
		//Model:
		//	(entities+=Entity | forms+=Form)*;
		public ParserRule getRule() { return rule; }

		//(entities+=Entity | forms+=Form)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }

		//forms+=Form
		public Assignment getFormsAssignment_1() { return cFormsAssignment_1; }

		//Form
		public RuleCall getFormsFormParserRuleCall_1_0() { return cFormsFormParserRuleCall_1_0; }
	}

	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEditsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWidgetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWidgetsWidgetParserRuleCall_5_0 = (RuleCall)cWidgetsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *
		// * Form and Widgets 
		// * / Form:
		//	"form" name=ID "edits" entity=[Entity] "{" widgets+=Widget* "}";
		public ParserRule getRule() { return rule; }

		//"form" name=ID "edits" entity=[Entity] "{" widgets+=Widget* "}"
		public Group getGroup() { return cGroup; }

		//"form"
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"edits"
		public Keyword getEditsKeyword_2() { return cEditsKeyword_2; }

		//entity=[Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//widgets+=Widget*
		public Assignment getWidgetsAssignment_5() { return cWidgetsAssignment_5; }

		//Widget
		public RuleCall getWidgetsWidgetParserRuleCall_5_0() { return cWidgetsWidgetParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Widget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextWidgetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckBoxWidgetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Widget:
		//	TextWidget | CheckBoxWidget;
		public ParserRule getRule() { return rule; }

		//TextWidget | CheckBoxWidget
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextWidget
		public RuleCall getTextWidgetParserRuleCall_0() { return cTextWidgetParserRuleCall_0; }

		//CheckBoxWidget
		public RuleCall getCheckBoxWidgetParserRuleCall_1() { return cCheckBoxWidgetParserRuleCall_1; }
	}

	public class TextWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthDECIMAL_NUMBERTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAttrAttributeCrossReference_5_0 = (CrossReference)cAttrAssignment_5.eContents().get(0);
		private final RuleCall cAttrAttributeIDTerminalRuleCall_5_0_1 = (RuleCall)cAttrAttributeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cValidateKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cValidateAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValidateExprParserRuleCall_6_1_0 = (RuleCall)cValidateAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TextWidget:
		//	"text" "(" length=DECIMAL_NUMBER ")" "->" attr=[Attribute] ("validate" validate=Expr)? ";";
		public ParserRule getRule() { return rule; }

		//"text" "(" length=DECIMAL_NUMBER ")" "->" attr=[Attribute] ("validate" validate=Expr)? ";"
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//length=DECIMAL_NUMBER
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//DECIMAL_NUMBER
		public RuleCall getLengthDECIMAL_NUMBERTerminalRuleCall_2_0() { return cLengthDECIMAL_NUMBERTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//attr=[Attribute]
		public Assignment getAttrAssignment_5() { return cAttrAssignment_5; }

		//[Attribute]
		public CrossReference getAttrAttributeCrossReference_5_0() { return cAttrAttributeCrossReference_5_0; }

		//ID
		public RuleCall getAttrAttributeIDTerminalRuleCall_5_0_1() { return cAttrAttributeIDTerminalRuleCall_5_0_1; }

		//("validate" validate=Expr)?
		public Group getGroup_6() { return cGroup_6; }

		//"validate"
		public Keyword getValidateKeyword_6_0() { return cValidateKeyword_6_0; }

		//validate=Expr
		public Assignment getValidateAssignment_6_1() { return cValidateAssignment_6_1; }

		//Expr
		public RuleCall getValidateExprParserRuleCall_6_1_0() { return cValidateExprParserRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class CheckBoxWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckBoxWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttrAttributeCrossReference_2_0 = (CrossReference)cAttrAssignment_2.eContents().get(0);
		private final RuleCall cAttrAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttrAttributeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValidateKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValidateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValidateExprParserRuleCall_3_1_0 = (RuleCall)cValidateAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CheckBoxWidget:
		//	"checkbox" "->" attr=[Attribute] ("validate" validate=Expr)? ";";
		public ParserRule getRule() { return rule; }

		//"checkbox" "->" attr=[Attribute] ("validate" validate=Expr)? ";"
		public Group getGroup() { return cGroup; }

		//"checkbox"
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//attr=[Attribute]
		public Assignment getAttrAssignment_2() { return cAttrAssignment_2; }

		//[Attribute]
		public CrossReference getAttrAttributeCrossReference_2_0() { return cAttrAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttrAttributeIDTerminalRuleCall_2_0_1() { return cAttrAttributeIDTerminalRuleCall_2_0_1; }

		//("validate" validate=Expr)?
		public Group getGroup_3() { return cGroup_3; }

		//"validate"
		public Keyword getValidateKeyword_3_0() { return cValidateKeyword_3_0; }

		//validate=Expr
		public Assignment getValidateAssignment_3_1() { return cValidateAssignment_3_1; }

		//Expr
		public RuleCall getValidateExprParserRuleCall_3_1_0() { return cValidateExprParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Entities and types to be referred by forms
		// * / Entity:
		//	"entity" name=ID "{" attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ID "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDerivedAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Attribute:
		//	SimpleAttribute | DerivedAttribute;
		public ParserRule getRule() { return rule; }

		//SimpleAttribute | DerivedAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleAttribute
		public RuleCall getSimpleAttributeParserRuleCall_0() { return cSimpleAttributeParserRuleCall_0; }

		//DerivedAttribute
		public RuleCall getDerivedAttributeParserRuleCall_1() { return cDerivedAttributeParserRuleCall_1; }
	}

	public class DerivedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DerivedAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DerivedAttribute:
		//	"/" name=ID "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"/" name=ID "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SimpleAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleAttribute:
		//	name=ID ":" type=Type ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	PrimitiveType | EntityType;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | EntityType
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//EntityType
		public RuleCall getEntityTypeParserRuleCall_1() { return cEntityTypeParserRuleCall_1; }
	}

	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefEntityCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefEntityIDTerminalRuleCall_0_1 = (RuleCall)cRefEntityCrossReference_0.eContents().get(1);
		
		//EntityType:
		//	ref=[Entity];
		public ParserRule getRule() { return rule; }

		//ref=[Entity]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Entity]
		public CrossReference getRefEntityCrossReference_0() { return cRefEntityCrossReference_0; }

		//ID
		public RuleCall getRefEntityIDTerminalRuleCall_0_1() { return cRefEntityIDTerminalRuleCall_0_1; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveType:
		//	IntType | FloatType | BooleanType | StringType;
		public ParserRule getRule() { return rule; }

		//IntType | FloatType | BooleanType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_1() { return cFloatTypeParserRuleCall_1; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_3() { return cStringTypeParserRuleCall_3; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType} "float";
		public ParserRule getRule() { return rule; }

		//{FloatType} "float"
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType:
		//	{IntType} "int";
		public ParserRule getRule() { return rule; }

		//{IntType} "int"
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//	{BooleanType} "bool";
		public ParserRule getRule() { return rule; }

		//{BooleanType} "bool"
		public Group getGroup() { return cGroup; }

		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType} "string";
		public ParserRule getRule() { return rule; }

		//{StringType} "string"
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cComparisonLevelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * Expressions, used in DSL form and widget
		// * / Expr:
		//	ComparisonLevel;
		public ParserRule getRule() { return rule; }

		//ComparisonLevel
		public RuleCall getComparisonLevelParserRuleCall() { return cComparisonLevelParserRuleCall; }
	}

	public class ComparisonLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionLevelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUnequalsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cGreaterLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cGreaterEqualsLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cSmallerEqualsLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cLogicalAndLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cImpliesLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Group cGroup_1_0_7 = (Group)cAlternatives_1_0.eContents().get(7);
		private final Action cLogicalOrLeftAction_1_0_7_0 = (Action)cGroup_1_0_7.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_7_1 = (Keyword)cGroup_1_0_7.eContents().get(1);
		private final Group cGroup_1_0_8 = (Group)cAlternatives_1_0.eContents().get(8);
		private final Action cSmallerLeftAction_1_0_8_0 = (Action)cGroup_1_0_8.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_8_1 = (Keyword)cGroup_1_0_8.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionLevelParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ComparisonLevel returns Expression:
		//	AdditionLevel (({Equals.left=current} "==" | {Unequals.left=current} "!=" | {Greater.left=current} ">" |
		//	{GreaterEquals.left=current} ">=" | {SmallerEquals.left=current} "<=" | {LogicalAnd.left=current} "&&" |
		//	{Implies.left=current} "=>" | {LogicalOr.left=current} "||" | {Smaller.left=current} "<") right=AdditionLevel)*;
		public ParserRule getRule() { return rule; }

		//AdditionLevel (({Equals.left=current} "==" | {Unequals.left=current} "!=" | {Greater.left=current} ">" |
		//{GreaterEquals.left=current} ">=" | {SmallerEquals.left=current} "<=" | {LogicalAnd.left=current} "&&" |
		//{Implies.left=current} "=>" | {LogicalOr.left=current} "||" | {Smaller.left=current} "<") right=AdditionLevel)*
		public Group getGroup() { return cGroup; }

		//AdditionLevel
		public RuleCall getAdditionLevelParserRuleCall_0() { return cAdditionLevelParserRuleCall_0; }

		//(({Equals.left=current} "==" | {Unequals.left=current} "!=" | {Greater.left=current} ">" | {GreaterEquals.left=current}
		//">=" | {SmallerEquals.left=current} "<=" | {LogicalAnd.left=current} "&&" | {Implies.left=current} "=>" |
		//{LogicalOr.left=current} "||" | {Smaller.left=current} "<") right=AdditionLevel)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.left=current} "==" | {Unequals.left=current} "!=" | {Greater.left=current} ">" | {GreaterEquals.left=current}
		//">=" | {SmallerEquals.left=current} "<=" | {LogicalAnd.left=current} "&&" | {Implies.left=current} "=>" |
		//{LogicalOr.left=current} "||" | {Smaller.left=current} "<"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Equals.left=current} "=="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0_0() { return cEqualsLeftAction_1_0_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }

		//{Unequals.left=current} "!="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Unequals.left=current}
		public Action getUnequalsLeftAction_1_0_1_0() { return cUnequalsLeftAction_1_0_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }

		//{Greater.left=current} ">"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_2_0() { return cGreaterLeftAction_1_0_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_2_1() { return cGreaterThanSignKeyword_1_0_2_1; }

		//{GreaterEquals.left=current} ">="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{GreaterEquals.left=current}
		public Action getGreaterEqualsLeftAction_1_0_3_0() { return cGreaterEqualsLeftAction_1_0_3_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_3_1() { return cGreaterThanSignEqualsSignKeyword_1_0_3_1; }

		//{SmallerEquals.left=current} "<="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{SmallerEquals.left=current}
		public Action getSmallerEqualsLeftAction_1_0_4_0() { return cSmallerEqualsLeftAction_1_0_4_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_4_1() { return cLessThanSignEqualsSignKeyword_1_0_4_1; }

		//{LogicalAnd.left=current} "&&"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{LogicalAnd.left=current}
		public Action getLogicalAndLeftAction_1_0_5_0() { return cLogicalAndLeftAction_1_0_5_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_5_1() { return cAmpersandAmpersandKeyword_1_0_5_1; }

		//{Implies.left=current} "=>"
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{Implies.left=current}
		public Action getImpliesLeftAction_1_0_6_0() { return cImpliesLeftAction_1_0_6_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0_6_1() { return cEqualsSignGreaterThanSignKeyword_1_0_6_1; }

		//{LogicalOr.left=current} "||"
		public Group getGroup_1_0_7() { return cGroup_1_0_7; }

		//{LogicalOr.left=current}
		public Action getLogicalOrLeftAction_1_0_7_0() { return cLogicalOrLeftAction_1_0_7_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_7_1() { return cVerticalLineVerticalLineKeyword_1_0_7_1; }

		//{Smaller.left=current} "<"
		public Group getGroup_1_0_8() { return cGroup_1_0_8; }

		//{Smaller.left=current}
		public Action getSmallerLeftAction_1_0_8_0() { return cSmallerLeftAction_1_0_8_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_8_1() { return cLessThanSignKeyword_1_0_8_1; }

		//right=AdditionLevel
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AdditionLevel
		public RuleCall getRightAdditionLevelParserRuleCall_1_1_0() { return cRightAdditionLevelParserRuleCall_1_1_0; }
	}

	public class AdditionLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationLevelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationLevelParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditionLevel returns Expression:
		//	MultiplicationLevel (({Plus.left=current} "+" | {Minus.left=current} "-") right=MultiplicationLevel)*;
		public ParserRule getRule() { return rule; }

		//MultiplicationLevel (({Plus.left=current} "+" | {Minus.left=current} "-") right=MultiplicationLevel)*
		public Group getGroup() { return cGroup; }

		//MultiplicationLevel
		public RuleCall getMultiplicationLevelParserRuleCall_0() { return cMultiplicationLevelParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=MultiplicationLevel)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=MultiplicationLevel
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicationLevel
		public RuleCall getRightMultiplicationLevelParserRuleCall_1_1_0() { return cRightMultiplicationLevelParserRuleCall_1_1_0; }
	}

	public class MultiplicationLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixOpLevelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixOpLevelParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicationLevel returns Expression:
		//	PrefixOpLevel (({Multi.left=current} "*" | {Div.left=current} "/") right=PrefixOpLevel)*;
		public ParserRule getRule() { return rule; }

		//PrefixOpLevel (({Multi.left=current} "*" | {Div.left=current} "/") right=PrefixOpLevel)*
		public Group getGroup() { return cGroup; }

		//PrefixOpLevel
		public RuleCall getPrefixOpLevelParserRuleCall_0() { return cPrefixOpLevelParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=PrefixOpLevel)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrefixOpLevel
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrefixOpLevel
		public RuleCall getRightPrefixOpLevelParserRuleCall_1_1_0() { return cRightPrefixOpLevelParserRuleCall_1_1_0; }
	}

	public class PrefixOpLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixOpLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExprAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_0_3_0 = (RuleCall)cExprAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixOpLevel returns Expression:
		//	{NotExpression} "!" "(" expr=Expr ")" | Atomic;
		public ParserRule getRule() { return rule; }

		//{NotExpression} "!" "(" expr=Expr ")" | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NotExpression} "!" "(" expr=Expr ")"
		public Group getGroup_0() { return cGroup_0; }

		//{NotExpression}
		public Action getNotExpressionAction_0_0() { return cNotExpressionAction_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//expr=Expr
		public Assignment getExprAssignment_0_3() { return cExprAssignment_0_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_3_0() { return cExprExprParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_1() { return cAtomicParserRuleCall_1; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTrueExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTrueKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFalseExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFieldContentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cWidgetcontentKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLenghtOfAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cLengthOfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExprAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_3_0 = (RuleCall)cExprAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cParenExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExprAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_4_2_0 = (RuleCall)cExprAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNumberLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueDECIMAL_NUMBERTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStringLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cAttributeRefAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cAttrAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cAttrAttributeCrossReference_7_1_0 = (CrossReference)cAttrAssignment_7_1.eContents().get(0);
		private final RuleCall cAttrAttributeIDTerminalRuleCall_7_1_0_1 = (RuleCall)cAttrAttributeCrossReference_7_1_0.eContents().get(1);
		
		//Atomic returns Expression:
		//	{TrueExpr} "true" | {FalseExpr} "false" | {FieldContent} "widgetcontent" | {lenghtOf} "lengthOf" "(" expr=Expr ")" |
		//	{ParenExpr} "(" expr=Expr ")" | {NumberLiteral} value=DECIMAL_NUMBER | {StringLiteral} value=STRING | {AttributeRef}
		//	attr=[Attribute];
		public ParserRule getRule() { return rule; }

		//{TrueExpr} "true" | {FalseExpr} "false" | {FieldContent} "widgetcontent" | {lenghtOf} "lengthOf" "(" expr=Expr ")" |
		//{ParenExpr} "(" expr=Expr ")" | {NumberLiteral} value=DECIMAL_NUMBER | {StringLiteral} value=STRING | {AttributeRef}
		//attr=[Attribute]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TrueExpr} "true"
		public Group getGroup_0() { return cGroup_0; }

		//{TrueExpr}
		public Action getTrueExprAction_0_0() { return cTrueExprAction_0_0; }

		//"true"
		public Keyword getTrueKeyword_0_1() { return cTrueKeyword_0_1; }

		//{FalseExpr} "false"
		public Group getGroup_1() { return cGroup_1; }

		//{FalseExpr}
		public Action getFalseExprAction_1_0() { return cFalseExprAction_1_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }

		//{FieldContent} "widgetcontent"
		public Group getGroup_2() { return cGroup_2; }

		//{FieldContent}
		public Action getFieldContentAction_2_0() { return cFieldContentAction_2_0; }

		//"widgetcontent"
		public Keyword getWidgetcontentKeyword_2_1() { return cWidgetcontentKeyword_2_1; }

		//{lenghtOf} "lengthOf" "(" expr=Expr ")"
		public Group getGroup_3() { return cGroup_3; }

		//{lenghtOf}
		public Action getLenghtOfAction_3_0() { return cLenghtOfAction_3_0; }

		//"lengthOf"
		public Keyword getLengthOfKeyword_3_1() { return cLengthOfKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//expr=Expr
		public Assignment getExprAssignment_3_3() { return cExprAssignment_3_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_3_0() { return cExprExprParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//{ParenExpr} "(" expr=Expr ")"
		public Group getGroup_4() { return cGroup_4; }

		//{ParenExpr}
		public Action getParenExprAction_4_0() { return cParenExprAction_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//expr=Expr
		public Assignment getExprAssignment_4_2() { return cExprAssignment_4_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_2_0() { return cExprExprParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//{NumberLiteral} value=DECIMAL_NUMBER
		public Group getGroup_5() { return cGroup_5; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_5_0() { return cNumberLiteralAction_5_0; }

		//value=DECIMAL_NUMBER
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//DECIMAL_NUMBER
		public RuleCall getValueDECIMAL_NUMBERTerminalRuleCall_5_1_0() { return cValueDECIMAL_NUMBERTerminalRuleCall_5_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_6() { return cGroup_6; }

		//{StringLiteral}
		public Action getStringLiteralAction_6_0() { return cStringLiteralAction_6_0; }

		//value=STRING
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_6_1_0() { return cValueSTRINGTerminalRuleCall_6_1_0; }

		//{AttributeRef} attr=[Attribute]
		public Group getGroup_7() { return cGroup_7; }

		//{AttributeRef}
		public Action getAttributeRefAction_7_0() { return cAttributeRefAction_7_0; }

		//attr=[Attribute]
		public Assignment getAttrAssignment_7_1() { return cAttrAssignment_7_1; }

		//[Attribute]
		public CrossReference getAttrAttributeCrossReference_7_1_0() { return cAttrAttributeCrossReference_7_1_0; }

		//ID
		public RuleCall getAttrAttributeIDTerminalRuleCall_7_1_0_1() { return cAttrAttributeIDTerminalRuleCall_7_1_0_1; }
	}
	
	
	private ModelElements pModel;
	private FormElements pForm;
	private WidgetElements pWidget;
	private TextWidgetElements pTextWidget;
	private CheckBoxWidgetElements pCheckBoxWidget;
	private EntityElements pEntity;
	private AttributeElements pAttribute;
	private DerivedAttributeElements pDerivedAttribute;
	private SimpleAttributeElements pSimpleAttribute;
	private TypeElements pType;
	private EntityTypeElements pEntityType;
	private PrimitiveTypeElements pPrimitiveType;
	private FloatTypeElements pFloatType;
	private IntTypeElements pIntType;
	private BooleanTypeElements pBooleanType;
	private StringTypeElements pStringType;
	private ExprElements pExpr;
	private ComparisonLevelElements pComparisonLevel;
	private AdditionLevelElements pAdditionLevel;
	private MultiplicationLevelElements pMultiplicationLevel;
	private PrefixOpLevelElements pPrefixOpLevel;
	private AtomicElements pAtomic;
	private TerminalRule tDECIMAL_NUMBER;
	private TerminalRule tINT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuiDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(entities+=Entity | forms+=Form)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// *
	// * Form and Widgets 
	// * / Form:
	//	"form" name=ID "edits" entity=[Entity] "{" widgets+=Widget* "}";
	public FormElements getFormAccess() {
		return (pForm != null) ? pForm : (pForm = new FormElements());
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}

	//Widget:
	//	TextWidget | CheckBoxWidget;
	public WidgetElements getWidgetAccess() {
		return (pWidget != null) ? pWidget : (pWidget = new WidgetElements());
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}

	//TextWidget:
	//	"text" "(" length=DECIMAL_NUMBER ")" "->" attr=[Attribute] ("validate" validate=Expr)? ";";
	public TextWidgetElements getTextWidgetAccess() {
		return (pTextWidget != null) ? pTextWidget : (pTextWidget = new TextWidgetElements());
	}
	
	public ParserRule getTextWidgetRule() {
		return getTextWidgetAccess().getRule();
	}

	//CheckBoxWidget:
	//	"checkbox" "->" attr=[Attribute] ("validate" validate=Expr)? ";";
	public CheckBoxWidgetElements getCheckBoxWidgetAccess() {
		return (pCheckBoxWidget != null) ? pCheckBoxWidget : (pCheckBoxWidget = new CheckBoxWidgetElements());
	}
	
	public ParserRule getCheckBoxWidgetRule() {
		return getCheckBoxWidgetAccess().getRule();
	}

	/// *
	// * Entities and types to be referred by forms
	// * / Entity:
	//	"entity" name=ID "{" attributes+=Attribute* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Attribute:
	//	SimpleAttribute | DerivedAttribute;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//DerivedAttribute:
	//	"/" name=ID "=" expr=Expr ";";
	public DerivedAttributeElements getDerivedAttributeAccess() {
		return (pDerivedAttribute != null) ? pDerivedAttribute : (pDerivedAttribute = new DerivedAttributeElements());
	}
	
	public ParserRule getDerivedAttributeRule() {
		return getDerivedAttributeAccess().getRule();
	}

	//SimpleAttribute:
	//	name=ID ":" type=Type ";";
	public SimpleAttributeElements getSimpleAttributeAccess() {
		return (pSimpleAttribute != null) ? pSimpleAttribute : (pSimpleAttribute = new SimpleAttributeElements());
	}
	
	public ParserRule getSimpleAttributeRule() {
		return getSimpleAttributeAccess().getRule();
	}

	//Type:
	//	PrimitiveType | EntityType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//EntityType:
	//	ref=[Entity];
	public EntityTypeElements getEntityTypeAccess() {
		return (pEntityType != null) ? pEntityType : (pEntityType = new EntityTypeElements());
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//PrimitiveType:
	//	IntType | FloatType | BooleanType | StringType;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType} "float";
	public FloatTypeElements getFloatTypeAccess() {
		return (pFloatType != null) ? pFloatType : (pFloatType = new FloatTypeElements());
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//IntType:
	//	{IntType} "int";
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType} "bool";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	/// *
	// * Expressions, used in DSL form and widget
	// * / Expr:
	//	ComparisonLevel;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ComparisonLevel returns Expression:
	//	AdditionLevel (({Equals.left=current} "==" | {Unequals.left=current} "!=" | {Greater.left=current} ">" |
	//	{GreaterEquals.left=current} ">=" | {SmallerEquals.left=current} "<=" | {LogicalAnd.left=current} "&&" |
	//	{Implies.left=current} "=>" | {LogicalOr.left=current} "||" | {Smaller.left=current} "<") right=AdditionLevel)*;
	public ComparisonLevelElements getComparisonLevelAccess() {
		return (pComparisonLevel != null) ? pComparisonLevel : (pComparisonLevel = new ComparisonLevelElements());
	}
	
	public ParserRule getComparisonLevelRule() {
		return getComparisonLevelAccess().getRule();
	}

	//AdditionLevel returns Expression:
	//	MultiplicationLevel (({Plus.left=current} "+" | {Minus.left=current} "-") right=MultiplicationLevel)*;
	public AdditionLevelElements getAdditionLevelAccess() {
		return (pAdditionLevel != null) ? pAdditionLevel : (pAdditionLevel = new AdditionLevelElements());
	}
	
	public ParserRule getAdditionLevelRule() {
		return getAdditionLevelAccess().getRule();
	}

	//MultiplicationLevel returns Expression:
	//	PrefixOpLevel (({Multi.left=current} "*" | {Div.left=current} "/") right=PrefixOpLevel)*;
	public MultiplicationLevelElements getMultiplicationLevelAccess() {
		return (pMultiplicationLevel != null) ? pMultiplicationLevel : (pMultiplicationLevel = new MultiplicationLevelElements());
	}
	
	public ParserRule getMultiplicationLevelRule() {
		return getMultiplicationLevelAccess().getRule();
	}

	//PrefixOpLevel returns Expression:
	//	{NotExpression} "!" "(" expr=Expr ")" | Atomic;
	public PrefixOpLevelElements getPrefixOpLevelAccess() {
		return (pPrefixOpLevel != null) ? pPrefixOpLevel : (pPrefixOpLevel = new PrefixOpLevelElements());
	}
	
	public ParserRule getPrefixOpLevelRule() {
		return getPrefixOpLevelAccess().getRule();
	}

	//Atomic returns Expression:
	//	{TrueExpr} "true" | {FalseExpr} "false" | {FieldContent} "widgetcontent" | {lenghtOf} "lengthOf" "(" expr=Expr ")" |
	//	{ParenExpr} "(" expr=Expr ")" | {NumberLiteral} value=DECIMAL_NUMBER | {StringLiteral} value=STRING | {AttributeRef}
	//	attr=[Attribute];
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//terminal DECIMAL_NUMBER returns ecore::EBigDecimal:
	//	"-"? "0".."9"* ("." "0".."9"+)?;
	public TerminalRule getDECIMAL_NUMBERRule() {
		return (tDECIMAL_NUMBER != null) ? tDECIMAL_NUMBER : (tDECIMAL_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_NUMBER"));
	} 

	//terminal INT returns ecore::EInt:
	//	"this one has been deactivated";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
