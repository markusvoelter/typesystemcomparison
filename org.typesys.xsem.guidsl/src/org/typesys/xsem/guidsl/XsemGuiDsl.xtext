grammar org.typesys.xsem.guidsl.XsemGuiDsl with org.eclipse.xtext.common.Terminals

generate xsemGuiDsl "http://www.typesys.org/xsem/guidsl/XsemGuiDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore	

Model:
	(entities+=Entity | 
	 forms+=Form )*;

/*
 * Form and Widgets 
 */

Form:
	"form" name=ID "edits" entity=[Entity] "{"	
		(widgets+=Widget)*
	"}"
;

Widget:
	TextWidget | CheckBoxWidget 
;

TextWidget:
	"text" "(" length=DECIMAL_NUMBER ")" "->" attr=[Attribute] ("validate" validate=Expression)? ";"
;

CheckBoxWidget:
	"checkbox" "->" attr=[Attribute] ("validate" validate=Expression)? ";"
;

/*
 * Entities and types to be referred by forms
 */

Entity:
	"entity" name=ID ('extends' superType=[Entity])? "{"
		(attributes+=Attribute)*
	"}";

Attribute:
	name=ID ( ((":" type=Type)? "=" expr=Expression) | 
               (":" type=Type) )";";

Typable:
	Attribute | Expression
;

Type:
	PrimitiveType | EntityType
;

EntityType:
	ref=[Entity]
;

PrimitiveType:
	NumberType | BooleanType | StringType
;

NumberType :
	FloatType | IntType
;

FloatType:
	{FloatType} "float"
;

IntType:
	{IntType} "int"
;

BooleanType:
	{BooleanType} "bool"
;

StringType:
	{StringType} "string"
;

/*
 * Expressions, used in DSL form and widget
 */

Expression:
	BooleanExpression;

BooleanExpression returns Expression:
	Comparison 
	(({AndOrExpression.left=current} op=("||"|"&&")) right=Comparison)*;

Comparison returns Expression:
       Equals
       (({Comparison.left=current}
               op=(">="|"<="|"<"|">")
       ) right=Equals)*;

Equals returns Expression:
       Addition 
       (({Equals.left=current}
               op=("=="|"!=")
       ) right=Addition)*;
 
Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*; 

Multiplication returns Expression:
	Prefixed (({MultiOrDiv.left=current} op=("*"|"/")) right=Prefixed)*;

Prefixed returns Expression:
	{BooleanNegation} =>"!" expression=Atomic | /* right associativity */
	{ArithmeticSigned} =>"-" expression=Atomic | /* right associativity */
	Atomic
;

Atomic returns Expression:
	'(' Expression ')' |
	({FieldContent} "widgetcontent") |
	({LengthOf} "lengthOf" "(" expr=Expression ")" ) |
	({EntityType} "new" ref=[Entity]) | 
	({BooleanLiteral} value=("true"|"false")) |
	({NumberLiteral} value=DECIMAL_NUMBER) |
	({StringLiteral} value=STRING) |
	({AttributeRef} attr=[Attribute|ID])
;

terminal DECIMAL_NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;

terminal INT returns ecore::EInt:
	'this one has been deactivated';
