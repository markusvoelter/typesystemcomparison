system org.typesys.xsem.guidsl.xsemantics.TypeSystem

import org.typesys.xsem.guidsl.xsemGuiDsl.*

judgments {
	attrtype ||- Attribute attribute : output Type
		error "cannot type attribute " + stringRep(attribute)
		source attribute
	exprtype |- Expression expression : output Type
		error "cannot type expression " + stringRep(expression)
		source expression
	// computes whether {@code right} is assignable to {@code left}
	isAssignable |- Type left <~ Type right
		error stringRep(right) + " is not assignable to " + stringRep(left)
	// computes the most general type between {@code first} and {@code second}
	mostGeneral |- Type first ~~ Type second |> output Type
}

rule AttributeType
	G ||- Attribute attr : Type attrType
from {
	{
		attr.type != null
		attrType = attr.type
	}
	or
		G |- attr.expr : attrType
}

axiom BooleanLiteralType
	G |- BooleanLiteral lit : XsemGuiDslFactory::eINSTANCE.createBooleanType

axiom StringLiteralType
	G |- StringLiteral lit : XsemGuiDslFactory::eINSTANCE.createStringType

axiom NumberLiteralType
	G |- NumberLiteral lit : XsemGuiDslFactory::eINSTANCE.createFloatType

rule FieldContentType
	G |- FieldContent fieldContent : Type type
from {
	G ||- env(G, 'widgetcontent', Attribute) : type
}

axiom NewEntityType
	G |- EntityType newEntity : newEntity

rule LengthOfType
	G |- LenghtOf len : XsemGuiDslFactory::eINSTANCE.createIntType
from {
	G |- len.expr : var StringType stringType
}

rule AttributeRefType
	G |- AttributeRef attrRef : Type type
from {
	G ||- attrRef.attr : type
}

rule MultiOrDivType
	G |- MultiOrDiv multiOrDiv : NumberType type
from {
	// require number types
	G |- multiOrDiv.left : var NumberType leftType
	G |- multiOrDiv.right : var NumberType rightType
	// get the most general
	G |- leftType ~~ rightType |> type
}

rule MinusType
	G |- Minus minus : NumberType type
from {
	// require number types
	G |- minus.left : var NumberType leftType
	G |- minus.right : var NumberType rightType
	// get the most general
	G |- leftType ~~ rightType |> type
}

rule PlusType
	G |- Plus plus : Type type
from {
	// deal with any type
	G |- plus.left : var Type leftType
	G |- plus.right : var Type rightType
	// get the most general (which can also be string)
	G |- leftType ~~ rightType |> type
}

rule ComparisonType
	G |- Comparison comparison : XsemGuiDslFactory::eINSTANCE.createBooleanType
from {
	// deal with any type
	G |- comparison.left : var Type leftType
	G |- comparison.right : var Type rightType
	// can only compare numbers and strings
	(leftType instanceof StringType && rightType instanceof StringType)
	||
	(leftType instanceof NumberType && rightType instanceof NumberType)
}

rule EqualsType
	G |- Equals equals : XsemGuiDslFactory::eINSTANCE.createBooleanType
from {
	// deal with any type
	G |- equals.left : var Type leftType
	G |- equals.right : var Type rightType
	// the subexpressions must be compatible
	(leftType instanceof NumberType && rightType instanceof NumberType)
	or
	leftType.eClass == rightType.eClass
}

rule AndOrType
	G |- AndOrExpression andOr : XsemGuiDslFactory::eINSTANCE.createBooleanType
from {
	// require boolean types
	G |- andOr.left : var BooleanType leftType
	G |- andOr.right : var BooleanType rightType
}

rule BooleanNegationType
	G |- BooleanNegation neg : XsemGuiDslFactory::eINSTANCE.createBooleanType
from {
	// require boolean types
	G |- neg.expression : var BooleanType expType
}

rule ArithmeticSignedType
	G |- ArithmeticSigned signed : NumberType numType
from {
	// require number types
	G |- signed.expression : numType
}

rule IsAssignableBase
	G |- Type left <~ Type right
from {
	left.eClass.isSuperTypeOf(right.eClass)
}

rule EntityTypeAssignable
	G |- EntityType left <~ EntityType right
from {
	left.ref == right.ref
	or
	getAll(right.ref, 
		XsemGuiDslPackage::eINSTANCE.entity_SuperType,
		XsemGuiDslPackage::eINSTANCE.entity_SuperType,
		typeof(Entity)
	).contains(left.ref)
	// if left is in the supertypes of right
}

axiom BooleanAssignableToString
	G |- StringType left <~ BooleanType right

axiom IntAssignableToString
	G |- StringType left <~ NumberType right

axiom IntAssignableToFloat
	G |- FloatType left <~ IntType right

rule MostGeneral
	G |- Type first ~~ Type second |> Type mostGeneral
from {
	{
		G |- first <~ second
		mostGeneral = first
	} or
		mostGeneral = second
}

checkrule AcyclicEntityHierarchy for
	Entity entity
from {
	if (entity.superType != null) {
		!getAll(entity, 
			XsemGuiDslPackage::eINSTANCE.entity_SuperType,
			XsemGuiDslPackage::eINSTANCE.entity_SuperType,
			typeof(Entity)
		).contains(entity)
		or
		fail
			error "Cyclic hierarchy for " + entity.name
			source entity
	}
}

checkrule AttributeTypeChecks for
	Attribute attribute
from {
	empty ||- attribute : var Type type
}

checkrule ValidateMustBeBoolean for
	Widget widget
from {
	widget.validate == null
	or {
		'widgetcontent' <- widget.attr |- widget.validate : var BooleanType boolType
		or
		fail
			error "validate expression must be boolean"
			source widget.validate
	}
}

checkrule ValidateTextWidgetAttributeNotBoolean for
	TextWidget widget
from {
	'widgetcontent' <- widget.attr ||- widget.attr : var Type attrType
	!(attrType instanceof BooleanType)
	or
	fail
		error "text widget attribute must NOT be boolean"
		source widget
		feature XsemGuiDslPackage::eINSTANCE.widget_Attr
}

checkrule ValidateCheckBoxWidgetAttributeBoolean for
	CheckBoxWidget widget
from {
	empty ||- widget.attr : var BooleanType attrType
	or
	fail
		error "checkbox widget attribute must be boolean"
		source widget
		feature XsemGuiDslPackage::eINSTANCE.widget_Attr
}